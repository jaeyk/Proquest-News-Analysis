group_by(cyl) %>%
summarise(q = list(quantile(mpg)))
mtcars %>%
group_by(cyl) %>%
summarise(q = list(quantile(mpg))) %>%
unnest()
# p_load loads and, if necessary, install missing packages.
# install.packages() + library() = p_load()
# If you just want to install, then use p_install()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
gapminder # toy data
)
starwars %>%
filter(gender == "female") %>%
arrange(desc(height))
# First example
starwars %>%
filter(height < 180, height > 160) %>%
nrow()
# Same as above
starwars %>%
filter(height < 180 & height > 160) %>%
nrow()
# Not same as above
starwars %>%
filter(height < 180 | height > 160) %>%
nrow()
# Same outcome as above but note the difference in boundary values
starwars %>%
filter(between(height, 161, 179)) %>%
nrow()
# Filter names include ars; `grepl` is a base R function
starwars %>%
filter(grepl("ars", tolower(name)))
# Or, if you prefer dplyr way
starwars %>%
filter(str_detect(tolower(name), "ars"))
# Filter brown and black hair_color
starwars %>%
filter(hair_color %in% c("black", "brown"))
starwars %>%
arrange(desc(height)) %>%
slice(1:6)
starwars %>%
arrange(desc(height)) %>%
slice(1:6)
starwars %>%
slice_frac(0.10,
replace = FALSE)
starwars %>%
slice_sample(0.10,
replace = FALSE)
# For reproducibility
set.seed(1234)
# Old way
starwars %>%
sample_frac(0.10,
replace = FALSE) # Without replacement
# New way
starwars %>%
slice_sample(prop = 0.10,
replace = FALSE)
# Old way
starwars %>%
sample_n(20,
replace = FALSE) # Without replacement
# New way
# New way
starwars %>%
slice_sample(n = 20,
replace = FALSE) # Without replacement
# Old way
starwars %>%
top_n(10, height)
# New way
starwars %>%
slice_max(height, n = 10)
install.packages("rgdal")
# Data
pacman::p_load(tidycensus)
us_rent_income
pacman::p_load(tidycensus)
install.packages("tidycensus", dependencies = TRUE)
# Data
pacman::p_load(tidycensus)
us_rent_income
library(tidycensus)
install.packages("tidycensus")
library(tidycensus, repo = 'https://mac.R-project.org')
install.packages(tidycensus,
repo = 'https://mac.R-project.org')
install.packages("tidycensus",
repo = 'https://mac.R-project.org')
remove.packages("tidycensus")
install.packages("tidycensus")
install.packages("tidycensus")
install.packages(c("rgdal", "tidycensus"))
install.packages(c("rgdal", "tidycensus", "sf"))
version(R)
R --version
r --version
install.packages("ggplot2")
install.packages("atom-language-r")
quit()
quit()
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
RSQLite, # for SQLite
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
install.packages("RSQLite")
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
drv <- DBI::dbDriver("RPostgreSQL")
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
odbc, # backend engine; open data connectivity driver
RPostgreSQL, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
# Define a backend engine
drv <- DBI::dbDriver("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
odbc, # backend engine; open data connectivity driver
RPostgreSQL, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
# Define a backend engine
drv <- DBI::dbDriver("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
# Define a backend engine
drv <- dbDriver("PostgreSQL")
# Create an empty in-memory database
con <- DBI::dbConnect(drv,
dbname = ":memory:")
# Define a backend engine
drv <- dbDriver("PostgreSQL")
# Create an empty in-memory database
con <- DBI::dbConnect(drv,
dbname = ":memory:")
# Define a backend engine
drv <- RSQLite::SQLite()
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
RSQLite, # for SQLite
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
remove.packages("RSQLite")
remove.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
devtools::install_github("rstats-db/RSQLite")
install.packages("RSQLite")
install.packages("Rcpp", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("Rcpp", dependencies = TRUE, INSTALL_opts = "--no-lock")
install.packages("RSQLite")
install.packages("RSQLite", dependencies = TRUE)
install.packages("RSQLite")
# Run this, if knitting doesn't work
knitr::opts_chunk$set(error = TRUE)
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
RSQLite, # for SQLite
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
# Define a backend engine
drv <- RSQLite::SQLite()
# Create an empty in-memory database
con <- DBI::dbConnect(drv,
dbname = ":memory:")
#con <- DBI::dbConnect(RMariaDB::MariaDB(),
# host = "database.rstudio.com",
# user = "hadley",
# password = rstudioapi::askForPassword("Database password")
#)
# Copy a local data frame to a DBI backend
copy_to(dest = con, # remote data source
df = flights) # a local dataframe
copy_to(dest = con, # remote data source
df = airports) # a local dataframe
# Note that we didn't load the data.
src_dbi(con)
install.packages(c("dplyr", "pkgload"))
install.packages("rmarkdown")
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
odbc, # backend engine; open data connectivity driver
RPostgreSQL
)
con <- dbConnect(RPostgres::Postgres(),
dbname = "jae",
host = "localhost",
port = 5432,
user = "oski",
password = "oski_pw")
# What's the table name?
src_dbi(con)
# Extract the table
test <- con %>% tbl("test_data")
# Use dplyr
test %>%
head(5)
test %>%
top_n(10)
test %>%
head(10)
install.packages("rsample")
# p_load loads and, if necessary, install missing packages.
# install.packages() + library() = p_load()
# If you just want to install, then use p_install()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
gapminder # toy data
)
starwars %>%
filter(gender == "female") %>%
arrange(desc(height))
# First example
starwars %>%
filter(height < 180, height > 160) %>%
nrow()
# Same as above
starwars %>%
filter(height < 180 & height > 160) %>%
nrow()
# Not same as above
starwars %>%
filter(height < 180 | height > 160) %>%
nrow()
# Same outcome as above but note the difference in boundary values
starwars %>%
filter(between(height, 161, 179)) %>%
nrow()
# Filter names include ars; `grepl` is a base R function
starwars %>%
filter(grepl("ars", tolower(name)))
# Or, if you prefer dplyr way
starwars %>%
filter(str_detect(tolower(name), "ars"))
# Filter brown and black hair_color
starwars %>%
filter(hair_color %in% c("black", "brown"))
starwars %>%
arrange(desc(height)) %>%
slice(1:6)
# For reproducibility
set.seed(1234)
# Old way
starwars %>%
sample_frac(0.10,
replace = FALSE) # Without replacement
# New way
starwars %>%
slice_sample(prop = 0.10,
replace = FALSE)
# Old way
starwars %>%
sample_n(20,
replace = FALSE) # Without replacement
# New way
# New way
starwars %>%
slice_sample(n = 20,
replace = FALSE) # Without replacement
# Old way
starwars %>%
top_n(10, height)
# New way
starwars %>%
slice_max(height, n = 10)
names(msleep)
msleep %>%
select(where(is.numeric))
mseleep %>%
select(starts_with("b") & ends_with("wt"))
msleep %>%
select(starts_with("b") & ends_with("wt"))
msleep %>%
select(any_of(c("name", "order"))) %>%
colnames()
msleep %>%
select(order, everything())
msleep %>%
select(where(!is.numeric))
# p_load loads and, if necessary, install missing packages.
# install.packages() + library() = p_load()
# If you just want to install, then use p_install()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
modelr, # for using the tidyverse framework to model outcomes
gapminder # data
)
gapminder %>%
group_by(continent) %>% #
summarise(mean_gdp = mean(gdpPercap))
gapminder %>%
group_by(continent) %>% #
summarise(mean_gdp = mean(gdpPercap),
count = n())
# The Interquartile Range = The Difference Between 75t and 25t Percentiles
gapminder %>%
group_by(continent) %>% #
summarise(IQR_gdp = IQR(gdpPercap))
gapminder %>%
group_by(continent) %>% #
summarise(min_gdp = min(gdpPercap),
max_gdp = max(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(first_gdp = first(gdpPercap),
last_gdp = last(gdpPercap))
gapminder %>%
group_by(continent) %>%
arrange(gdpPercap) %>% # Adding arrange
summarise(first_gdp = first(gdpPercap),
last_gdp = last(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(ns = n())
gapminder %>%
group_by(continent) %>%
summarise(rich_countries = mean(gdpPercap > 20000))
nested <- gapminder %>%
group_by(country, continent) %>%
nest()
# country & continent (two grouping variables) + data
names(nested)
# Data = listed columns
nested$data[[1]]
nested
nested <- gapminder %>%
nest_by(country, continent)
nested
names(nested)
# Data = listed columns
nested$data[[1]]
lm_model <- function(df) {
lm(lifeExp ~ year, data = df)
}
# Apply m_model to the nested data
nested <- nested %>%
mutate(models = purrr::map(data, lm_model)) # Add the list object as a new column
# Apply m_model to the nested data
nested <- nested %>%
mutate(models = list(lm_model, data)) # Add the list object as a new column
# Apply m_model to the nested data
nested <- nested %>%
mutate(data = as.list(data)) %>%
mutate(models = purrr::map(data, lm_model)) # Add the list object as a new column
type(nested$data)
typeof(nested$data)
# Apply m_model to the nested data
nested <- nested %>%
mutate(models = purrr::map(data, lm_model)) # Add the list object as a new column
# Old way
nested <- gapminder %>%
group_by(country, continent) %>%
nest()
# New way
nested <- gapminder %>%
group_by(country, continent) %>%
nest()
# country & continent (two grouping variables) + data
names(nested)
# Data = listed columns
nested$data[[1]]
lm_model <- function(df) {
lm(lifeExp ~ year, data = df)
}
# Apply m_model to the nested data
nested <- nested %>%
mutate(models = purrr::map(data, lm_model)) # Add the list object as a new column
# Display the result by filtering rows
nested %>%
filter(continent == "Asia")
# Apply m_model to the nested data
nested <- nested %>%
mutate(models = map(data, lm_model)) # Add the list object as a new column
# Display the result by filtering rows
nested %>%
filter(continent == "Asia")
install.packages("lubridate")
rm(list = ls())
devtools::install_github("jaeyk/kimtools")
library(kimtools)
bind_two_dfs_with_new_column
bind_two_dfs_with_new_column()
??kimtools
de=FALSE}
library(devtools)
install_github("jaeyk/kimtools")
library(kimtools)
library(kimtools)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
rvest, # beautiful soup equivalent in R
tidyverse, # tidyverse
textclean, # clean text package
stringr # string manipulation
)
file.choose()
test <- read_csv(file.choose())
test <- read_html(file.choose())
html_data <- read_html(file.choose())
doc_text <- html_data %>% html_nodes("text")
class(doc_text)
doc_text <- html_data %>% html_nodes("text")[1]
doc_text <- html_data %>% html_nodes("text")
doc_text
doc_text %>% as.data.frame()
doc_text %>% html_text()
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']")
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text()
class(doc_mixed)
doc_mixed
doc_text
doc_text <- html_data %>% html_nodes("text") %>%
html_text() %>% replace_html()
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html()
doc_text
rm(list = ls())
devtools::install_github("jaeyk/tidyethnicnews")
devtools::install_github("jaeyk/tidyethnicnews")
rm(list = ls())
getwd()
setwd("/home/jae/proquest_parser")
library(devtools)
document()
document()
quit()
