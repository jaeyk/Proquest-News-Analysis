if(sum(is.na(df$source)) >= 1){print("NAs were found in source column, which should not happen.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Successfully parsed.")
}
# Output
df
}
#' Parse multiple ProQuest's archive search result (saved in HTML format) into a dataframe simultaneously
#'
#' @param filepath A file path where a user saved HTML files containing the search results from the ProQuest's news archive. This input should be a string vector.
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
filepath <- "/home/jae/muslim_newspapers-selected/full_version/"
filename <- list.files(path = filepath, pattern = '*.html', full.names = TRUE)
test_list <- filename[1:3]
pb <- progress_bar$new(
format = "  downloading [:bar] :percent in :elapsed",
total = length(test_list), clear = FALSE, width= 60)
df <- list(test_list) %>%
pmap(~html_to_dataframe(.)) %>%
reduce(full_join, by = c("text", "source", "author","date"))
#' Parse a ProQuest's archive search result (saved in HTML format) into a dataframe
#'
#' @param html_file An HTML file that contains the search results from the ProQuest's news archive
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
# html_file <- file.choose()
html_to_dataframe <- function(html_file){
suppressWarnings()
# Import data
html_data <- read_html(html_file)
# Select text
doc_text <- html_data %>%
html_nodes("text") %>%
replace_html() %>%
str_replace_all("[\r\n]", "")
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html() %>%
str_replace_all(".*\n</span><span class=\"titleAuthorETC\"><strong>", "") %>%
str_replace_all(":.*", "") %>%
str_replace_all("</strong>.*</strong>", "") %>%
str_replace_all("\\]", ":")
# Combine the two objects together as a dataframe
df <- data.frame(text = doc_text,
mixed = doc_mixed)
# Separate mixed
df <- df %>% separate(mixed, c("source_mixed", "date"), ":")
# Final clean up
## Date
df$date <- str_replace_all(df$date, "\n\n\n", "") %>% str_trim()
# Final clean up
df$source_mixed <- df$source_mixed %>%
str_replace_all(";.*", "")
# Separate author and source
df <- df %>% separate(source_mixed, c("author", "source"), ".\n")
if(sum(is.na(df$source)) >= 1){print("NAs were found in source column, which should not happen.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Successfully parsed.")
}
# Output
df
}
#' Parse multiple ProQuest's archive search result (saved in HTML format) into a dataframe simultaneously
#'
#' @param filepath A file path where a user saved HTML files containing the search results from the ProQuest's news archive. This input should be a string vector.
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
filepath <- "/home/jae/muslim_newspapers-selected/full_version/"
filename <- list.files(path = filepath, pattern = '*.html', full.names = TRUE)
test_list <- filename[1:3]
pb <- progress_bar$new(
format = "  downloading [:bar] :percent in :elapsed",
total = length(test_list), clear = FALSE, width= 60)
df <- list(test_list) %>%
pmap(~html_to_dataframe(.)) %>%
reduce(full_join, by = c("text", "source", "author","date"))
#' Parse a ProQuest's archive search result (saved in HTML format) into a dataframe
#'
#' @param html_file An HTML file that contains the search results from the ProQuest's news archive
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
# html_file <- file.choose()
html_to_dataframe <- function(html_file){
# Import data
html_data <- read_html(html_file)
# Select text
doc_text <- html_data %>%
html_nodes("text") %>%
replace_html() %>%
str_replace_all("[\r\n]", "")
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html() %>%
str_replace_all(".*\n</span><span class=\"titleAuthorETC\"><strong>", "") %>%
str_replace_all(":.*", "") %>%
str_replace_all("</strong>.*</strong>", "") %>%
str_replace_all("\\]", ":")
# Combine the two objects together as a dataframe
df <- data.frame(text = doc_text,
mixed = doc_mixed)
# Separate mixed
df <- df %>% separate(mixed, c("source_mixed", "date"), ":")
# Final clean up
## Date
df$date <- str_replace_all(df$date, "\n\n\n", "") %>% str_trim()
# Final clean up
df$source_mixed <- df$source_mixed %>%
str_replace_all(";.*", "")
# Separate author and source
df <- df %>% separate(source_mixed, c("author", "source"), ".\n")
if(sum(is.na(df$source)) >= 1){print("NAs were found in source column, which should not happen.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Successfully parsed.")
}
# Output
df
}
#' Parse multiple ProQuest's archive search result (saved in HTML format) into a dataframe simultaneously
#'
#' @param filepath A file path where a user saved HTML files containing the search results from the ProQuest's news archive. This input should be a string vector.
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
filepath <- "/home/jae/muslim_newspapers-selected/full_version/"
filename <- list.files(path = filepath, pattern = '*.html', full.names = TRUE)
test_list <- filename[1:3]
pb <- progress_bar$new(
format = "  downloading [:bar] :percent in :elapsed",
total = length(test_list), clear = FALSE, width= 60)
df <- list(test_list) %>%
pmap(~html_to_dataframe(.)) %>%
reduce(full_join, by = c("text", "source", "author","date"))
unique(df$source)
install.packages("progressr")
library(progressr)
packageVersion(progressr)
packageVersion("progressr")
df <- with_progress(list(test_list) %>%
pmap(~html_to_dataframe(.)) %>%
reduce(full_join, by = c("text", "source", "author","date")))
df <- with_progress(list(test_list) %>%
pmap(~html_to_dataframe(.)) %>%
reduce(full_join, by = c("text", "source", "author","date")))
#' Parse multiple ProQuest's archive search result (saved in HTML format) into a dataframe simultaneously
#'
#' @param filepath A file path where a user saved HTML files containing the search results from the ProQuest's news archive. This input should be a string vector.
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
filepath <- "/home/jae/muslim_newspapers-selected/full_version/"
filename <- list.files(path = filepath, pattern = '*.html', full.names = TRUE)
df <- with_progress(list(file_name) %>%
pmap(~html_to_dataframe(.)) %>%
reduce(full_join, by = c("text", "source", "author","date")))
#' Parse multiple ProQuest's archive search result (saved in HTML format) into a dataframe simultaneously
#'
#' @param filepath A file path where a user saved HTML files containing the search results from the ProQuest's news archive. This input should be a string vector.
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
filepath <- "/home/jae/muslim_newspapers-selected/full_version/"
filename <- list.files(path = filepath, pattern = '*.html', full.names = TRUE)
df <- with_progress(list(filename) %>%
pmap(~html_to_dataframe(.)) %>%
reduce(full_join, by = c("text", "source", "author","date")))
#' Parse a ProQuest's archive search result (saved in HTML format) into a dataframe
#'
#' @param html_file An HTML file that contains the search results from the ProQuest's news archive
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
# html_file <- file.choose()
html_to_dataframe <- function(html_file){
# Import data
html_data <- read_html(html_file)
# Select text
doc_text <- html_data %>%
html_nodes("text") %>%
replace_html() %>%
str_replace_all("[\r\n]", "")
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html() %>%
str_replace_all(".*\n</span><span class=\"titleAuthorETC\"><strong>", "") %>%
str_replace_all(":.*", "") %>%
str_replace_all("</strong>.*</strong>", "") %>%
str_replace_all("\\]", ":")
# Combine the two objects together as a dataframe
df <- data.frame(text = doc_text,
mixed = doc_mixed)
# Separate mixed
df <- df %>% separate(mixed, c("source_mixed", "date"), ":")
# Final clean up
## Date
df$date <- str_replace_all(df$date, "\n\n\n", "") %>% str_trim()
# Final clean up
df$source_mixed <- df$source_mixed %>%
str_replace_all(";.*", "")
# Separate author and source
df <- df %>% separate(source_mixed, c("author", "source"), ".\n")
if(sum(is.na(df$source)) >= 1){print("NAs were found in source column. The problem will be automatically fixed.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Successfully parsed.")
}
# Output
df
}
#' Parse a ProQuest's archive search result (saved in HTML format) into a dataframe
#'
#' @param html_file An HTML file that contains the search results from the ProQuest's news archive
#' @return A dataframe with three columns ("text", "source", "date")
#'
#' @export
# html_file <- file.choose()
html_to_dataframe <- function(html_file){
# Import data
html_data <- read_html(html_file)
# Select text
doc_text <- html_data %>%
html_nodes("text") %>%
replace_html() %>%
str_replace_all("[\r\n]", "")
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html() %>%
str_replace_all(".*\n</span><span class=\"titleAuthorETC\"><strong>", "") %>%
str_replace_all(":.*", "") %>%
str_replace_all("</strong>.*</strong>", "") %>%
str_replace_all("\\]", ":")
# Combine the two objects together as a dataframe
df <- data.frame(text = doc_text,
mixed = doc_mixed)
# Separate mixed
df <- df %>% separate(mixed, c("source_mixed", "date"), ":")
# Final clean up
## Date
df$date <- str_replace_all(df$date, "\n\n\n", "") %>% str_trim()
# Final clean up
df$source_mixed <- df$source_mixed %>%
str_replace_all(";.*", "")
# Separate author and source
df <- df %>% separate(source_mixed, c("author", "source"), ".\n")
if(sum(is.na(df$source)) >= 1){print("NAs were found in source column. The problem will be fixed automatically.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Everything was successful.")
}
# Output
df
}
install.packages(c("RcppArmadillo", "rgdal", "sf", "tidycensus", "websocket"))
??read_html
packageVersion("xml2")
#' Parse a ProQuest's archive search result (saved in HTML format) into a dataframe
#'
#' @param html_file An HTML file that contains the search results from the ProQuest's news archive
#' @return A dataframe with four columns ("text", "source", "author", "date")
#'
#' @export
# html_file <- file.choose()
html_to_dataframe <- function(html_file){
# Import data
html_data <- read_html(html_file)
# Select text
doc_text <- html_data %>%
html_nodes("text") %>%
replace_html() %>%
str_replace_all("[\r\n]", "")
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html() %>%
str_replace_all(".*\n</span><span class=\"titleAuthorETC\"><strong>", "") %>%
str_replace_all(":.*", "") %>%
str_replace_all("</strong>.*</strong>", "") %>%
str_replace_all("\\]", ":")
# Combine the two objects together as a dataframe
df <- data.frame(text = doc_text,
mixed = doc_mixed)
# Separate mixed
df <- df %>% separate(mixed, c("source_mixed", "date"), ":")
# Final clean up
## Date
df$date <- str_replace_all(df$date, "\n\n\n", "") %>% str_trim()
# Final clean up
df$source_mixed <- df$source_mixed %>%
str_replace_all(";.*", "")
# Separate author and source
df <- df %>% separate(source_mixed, c("author", "source"), ".\n")
if(sum(is.na(df$source)) >= 1){print("NAs were found in source column. The problem will be fixed automatically.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Everything was successful.")
}
# Output
df
}
#' Parse multiple ProQuest's archive search result (saved in HTML format) into a dataframe simultaneously
#'
#' @param filepath A file path where a user saved HTML files containing the search results from the ProQuest's news archive. This input should be a string vector.
#' @return A dataframe with four columns ("text", "source", "author", "date")
#'
#' @export
#'
html_to_dataframe_all <- function(filepath){
# Load all HTML files in the designated file path
filename <- list.files(path = filepath, pattern = '*.html', full.names = TRUE)
df <- list(filename) %>%
# Apply html_to_dataframe function to items on the list
pmap(~html_to_dataframe(.)) %>%
# Full join the list of dataframes
reduce(full_join, by = c("text", "source", "author","date"))
# Output
df
}
#' Parse multiple ProQuest's archive search result (saved in HTML format) into a dataframe simultaneously
#'
#' @param filepath A file path where a user saved HTML files containing the search results from the ProQuest's news archive. This input should be a string vector.
#' @return A dataframe with four columns ("text", "source", "author", "date")
#'
#' @export
#'
html_to_dataframe_all <- function(filepath){
# Load all HTML files in the designated file path
filename <- list.files(path = filepath, pattern = '*.html', full.names = TRUE)
df <- list(filename) %>%
# Apply html_to_dataframe function to items on the list
pmap(~html_to_dataframe(.)) %>%
# Full join the list of dataframes
reduce(full_join, by = c("text", "source", "author","date"))
# Output
df
}
#' Parse a ProQuest's archive search result (saved in HTML format) into a dataframe
#'
#' @param html_file An HTML file that contains the search results from the ProQuest's news archive
#' @return A dataframe with four columns ("text", "source", "author", "date")
#'
#' @export
# html_file <- file.choose()
html_to_dataframe <- function(html_file){
# Import data
html_data <- read_html(html_file)
# Select text
doc_text <- html_data %>%
html_nodes("text") %>%
replace_html() %>%
str_replace_all("[\r\n]", "")
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html() %>%
str_replace_all(".*\n</span><span class=\"titleAuthorETC\"><strong>", "") %>%
str_replace_all(":.*", "") %>%
str_replace_all("</strong>.*</strong>", "") %>%
str_replace_all("\\]", ":")
# Combine the two objects together as a dataframe
df <- data.frame(text = doc_text,
mixed = doc_mixed)
# Separate mixed
df <- df %>% separate(mixed, c("source_mixed", "date"), ":")
# Final clean up
## Date
df$date <- str_replace_all(df$date, "\n\n\n", "") %>% str_trim()
# Final clean up
df$source_mixed <- df$source_mixed %>%
str_replace_all(";.*", "")
# Separate author and source
df <- df %>% separate(source_mixed, c("author", "source"), ".\n")
if(sum(is.na(df$source)) >= 1){print("NAs were found in source column. The problem will be fixed automatically.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Everything was successful.")
}
# Output
df
}
#' Parse a ProQuest's archive search result (saved in HTML format) into a dataframe
#'
#' @param html_file An HTML file that contains the search results from the ProQuest's news archive
#' @return A dataframe with four columns ("text", "source", "author", "date")
#'
#' @export
html_to_dataframe <- function(html_file){
# Import data
html_data <- read_html(html_file)
# Select text
doc_text <- html_data %>%
html_nodes("text") %>%
replace_html() %>%
str_replace_all("[\r\n]", "")
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html() %>%
str_replace_all(".*\n</span><span class=\"titleAuthorETC\"><strong>", "") %>%
str_replace_all(":.*", "") %>%
str_replace_all("</strong>.*</strong>", "") %>%
str_replace_all("\\]", ":")
# Combine the two objects together as a dataframe
df <- data.frame(text = doc_text,
mixed = doc_mixed)
# Separate mixed
df <- df %>% separate(mixed, c("source_mixed", "date"), ":")
# Final clean up
## Date
df$date <- str_replace_all(df$date, "\n\n\n", "") %>% str_trim()
# Final clean up
df$source_mixed <- df$source_mixed %>%
str_replace_all(";.*", "")
# Separate author and source
df <- df %>% separate(source_mixed, c("author", "source"), ".\n")
if(sum(is.na(df$source)) >= 1){print("NAs were found in source column. The problem will be fixed automatically.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Everything was successful.")
}
# Output
df
}
getwd()
setwd("/home/jae/proquest_parser")
getwd()
library(devtools)
devtools::load_all
devtools::load_all()
`rm(list = c("df", "doc_mixed", "doc_text", "html_data", "html_to_dataframe", "html_to_dataframe_all"))`
rm(list = c("df", "doc_mixed", "doc_text", "html_data", "html_to_dataframe", "html_to_dataframe_all"))
devtools::load_all()
document()
install()
install.packages("xml2")
install.packages("xml2")
library(xml2)
install()
#' Parse a ProQuest's archive search result (saved in HTML format) into a dataframe
#'
#' @param html_file An HTML file that contains the search results from the ProQuest's news archive
#' @return A dataframe with four columns ("text", "source", "author", "date")
#'
#' @export
html_to_dataframe <- function(html_file){
# Import data
html_data <- xml2::read_html(html_file)
# Select text
doc_text <- html_data %>%
html_nodes("text") %>%
replace_html() %>%
str_replace_all("[\r\n]", "")
# Select mixed (source + date)
doc_mixed <- html_data %>% html_nodes("[class='abstract_Text col-xs-12 col-sm-10 col-md-10 col-lg-10']") %>% html_text() %>% replace_html() %>%
str_replace_all(".*\n</span><span class=\"titleAuthorETC\"><strong>", "") %>%
str_replace_all(":.*", "") %>%
str_replace_all("</strong>.*</strong>", "") %>%
str_replace_all("\\]", ":")
# Combine the two objects together as a dataframe
df <- data.frame(text = doc_text,
mixed = doc_mixed)
# Separate mixed
df <- df %>% separate(mixed, c("source_mixed", "date"), ":")
# Final clean up
## Date
df$date <- str_replace_all(df$date, "\n\n\n", "") %>% str_trim()
# Final clean up
df$source_mixed <- df$source_mixed %>%
str_replace_all(";.*", "")
# Separate author and source
df <- df %>% separate(source_mixed, c("author", "source"), ".\n")
if(sum(is.na(df$source)) >= 1){print("NAs were found in source column. The problem will be fixed automatically.")}
# Replace the NAs in 'source' column with the misplaced values in 'author' column
if(sum(is.na(df$source)) >= 1){
df$source <- ifelse(is.na(df$source), df$author, df$source)
df$author <- ifelse(df$author %in% unique(df$source), NA, df$author)
print("Problem fixed.")
} else {
print("Everything was successful.")
}
# Output
df
}
install()
